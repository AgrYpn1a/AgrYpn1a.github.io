<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Computer Science 101</title><link>/</link><description>Recent content in Introduction on Computer Science 101</description><generator>Hugo -- gohugo.io</generator><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary Numbers</title><link>/docs/problems/oop/binary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/problems/oop/binary/</guid><description>Binary Numbers OOP #</description></item><item><title>Logic</title><link>/docs/math/algebra/logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/math/algebra/logic/</guid><description>Logic #</description></item><item><title>Practice 0</title><link>/docs/problems/beginner/p0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/problems/beginner/p0/</guid><description>Practice 0 #</description></item><item><title>Arrays</title><link>/docs/problems/beginner/arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/problems/beginner/arrays/</guid><description>Arrays # In this practice we are going to cover some of the most often used algorithms to read, filter and transform the array according to our needs. We will assume that you already understand how arrays work, but a small reminder will be written here in the document.
We will start simple, and slowly work our way to more complex stuff. Once you are ready you can checkout more advanced practice here.</description></item><item><title>Functions</title><link>/docs/math/algebra/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/math/algebra/functions/</guid><description>Functions #</description></item><item><title>Binary Numbers</title><link>/docs/problems/beginner/binary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/problems/beginner/binary/</guid><description>Binary Numbers # In this chapter we are going to implement methods that help us work with binary numbers. First we are going to read binary numbers as strings from STD input stream, and then we are going to validate these strings to make sure that the input is actually a binary number. After that we will be able to do more fun stuff, such as converting a binary number to a decimal and vice versa, and more.</description></item><item><title>Relations</title><link>/docs/math/algebra/relations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/math/algebra/relations/</guid><description>Relations #</description></item><item><title>Numbers</title><link>/docs/math/algebra/numbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/math/algebra/numbers/</guid><description>Number Systems #</description></item><item><title>Binary Number System</title><link>/docs/math/algebra/binary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/math/algebra/binary/</guid><description>Binary Number System #</description></item><item><title>Hello world!</title><link>/posts/hello-world/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/hello-world/</guid><description>&amp;ldquo;Hello world!&amp;rdquo; is a phrase that usually begins every programming tutorial or course out there. A program that prints this message on screen is typically the first program you will ever write when you start learning programming. As this is my first blog post I decided to follow that tradition here as well.
Whether you are an absolute beginner, computer science student or an already formed programmer I believe the material written here will be helpful for you.</description></item><item><title>[C#] Linux, MacOS</title><link>/docs/programming/setup/dotnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/setup/dotnet/</guid><description>.NET Setup #</description></item><item><title>[C#] Visual Studio</title><link>/docs/programming/setup/vs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/setup/vs/</guid><description>Visual Studio Setup #</description></item><item><title>[C++] Linux, MacOS</title><link>/docs/programming/setup/cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/setup/cpp/</guid><description>C++ setup on Linux and MacOS # Linux # MacOS #</description></item><item><title>[C++] Visual Studio</title><link>/docs/programming/setup/vscpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/setup/vscpp/</guid><description>Visual Studio Setup #</description></item><item><title>C# References</title><link>/docs/programming/mem_ptr/refcsharp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/mem_ptr/refcsharp/</guid><description>C# References # References.</description></item><item><title>C++ Pointers</title><link>/docs/programming/mem_ptr/pointerscpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/programming/mem_ptr/pointerscpp/</guid><description>C++ Pointers # We have worked in C# so far, so you may wonder why C++ all of a sudden? The answer is simple, C# will allow us to work with references / pointers, however it will hide some details from us. To discover these details and to make things more clear, but also more confusing at first, we want to dive in and take a short detour to C++ to explore this subject in depth.</description></item></channel></rss>